package com.example.todolist;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentManager;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Calendar;

public class MainActivity extends AppCompatActivity implements DatePickerDialog.SaveDateListener{

    private Task currentTask;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            initTask(extras.getInt("taskID"));
        } else {
            currentTask = new Task();
        }

        initNavbarButtons();
        initTextChangedEvents();
        initSaveButton();
        initChangeDateButton();
    }

    private void initNavbarButtons() {
        ImageButton taskListButton = findViewById(R.id.listButton);
        ImageButton addButton = findViewById(R.id.addButton);
        ImageButton settingsButton = findViewById(R.id.settingsButton);

        addButton.setEnabled(false);

        taskListButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, TaskList.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); //clears the stack trace
                startActivity(intent);
            }
        });

        settingsButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, TaskSettings.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); //clears the stack trace
                startActivity(intent);
            }
        });
    }

    private void initTextChangedEvents() {

        final EditText etSubject = findViewById(R.id.subjectInput);
        etSubject.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentTask.setSubject(etSubject.getText().toString());
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        final EditText etTask = findViewById(R.id.taskInput);
        etTask.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                currentTask.setTask(etTask.getText().toString());
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // autogenerated method for Text Watcher
            }
        });

        //for the radio buttons to add on click
        RadioGroup radioGroup = findViewById(R.id.radioGroup);
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                RadioButton radioHigh = findViewById(R.id.radioButtonHigh);
                RadioButton radioMedium = findViewById(R.id.radioButtonMedium);

                if (radioHigh.isChecked()) {
                    currentTask.setPriority("High");
                } else if (radioMedium.isChecked()) {
                    currentTask.setPriority("Medium");
                } else {
                    currentTask.setPriority("Low");
                }
            }
        });

    }

    @Override
    public void didFinishDatePickerDialog(Calendar selectedTime) {
        TextView dateLabel = findViewById(R.id.dateLabel);
        dateLabel.setText(DateFormat.format("MM/dd/yyyy", selectedTime));
        currentTask.setDueDate(selectedTime);
    }

    private void initChangeDateButton() {
        Button changeDate = findViewById(R.id.changeDateButton);
        changeDate.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                FragmentManager fm = getSupportFragmentManager();
                DatePickerDialog datePickerDialog = new DatePickerDialog();
                datePickerDialog.show(fm, "DatePick");
            }
        });
    }

    private void initSaveButton () {

        Button saveButton = findViewById(R.id.saveButton);
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                boolean wasSuccessful;
                TaskDataSource ds = new TaskDataSource(MainActivity.this);
                try {

                    ds.open();

                    if(currentTask.getTaskID() == -1) {
                        wasSuccessful = ds.addTask(currentTask);
                        if (wasSuccessful) {
                            int newId = ds.getLastTaskID();
                            currentTask.setTaskID(newId);
                            Toast.makeText(MainActivity.this, "This Task has been saved", Toast.LENGTH_LONG).show();

                        }
                    } else {
                        wasSuccessful = ds.updateTask(currentTask);
                        Toast.makeText(MainActivity.this, "This Task has been Updated", Toast.LENGTH_LONG).show();

                    }
                    ds.close();
                } catch (Exception e) {
                    wasSuccessful = false;
                }
            }
        });
    }

    private void initTask (int id) {

        TaskDataSource ds = new TaskDataSource(MainActivity.this);
        try {
            ds.open();
            currentTask = ds.getSpecificTask(id);
            ds.close();
        } catch (Exception e) {
            Toast.makeText(this,"Load Task Failed", Toast.LENGTH_LONG).show();
        }

        EditText editSubject = findViewById(R.id.subjectInput);
        EditText editDescription = findViewById(R.id.taskInput);
        TextView dueDate = findViewById(R.id.dateLabel);

        editSubject.setText(currentTask.getSubject());
        editDescription.setText(currentTask.getTask());
        dueDate.setText(DateFormat.format("MM/dd/yyyy", currentTask.getDueDate().getTimeInMillis()).toString());

        //setting radio button
        RadioButton high = findViewById(R.id.radioButtonHigh);
        RadioButton medium = findViewById(R.id.radioButtonMedium);
        RadioButton low = findViewById(R.id.radioButtonLow);

        if ("High".equals(currentTask.getPriority())) {
            high.setChecked(true);
        } else if ("Medium".equals(currentTask.getPriority())) {
            medium.setChecked(true);
        } else {
            low.setChecked(true);
        }
    }

}